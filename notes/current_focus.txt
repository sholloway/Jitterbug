Next steps:
Understand how to use MVP matrix projection
Upgrade GLM to 0.94...

Get pixels flowing.
	API -> SceneGraph -> Spatial Partition -> Culler -> Render -> ImageProcessor -> Image 
	
1. Write basic API code for def rect(x,y,width,height)
	Need stroke, fill, rect_mode, bind to shader (Want to reference a structure of shaders. Don't have multiple copies floating around.)
2. Write SceneGraph
	Need add_geometry 
3. Spatial Partition
	Just need to add all geometry to the culler at this point.
4. Renderer
	Need a way of managing shaders. Part of Geometry class?
	Combine the work done on JBOpenGLView + WebGL
	Render to Framebuffer
	Get pixels from Framebuffer
5. Compositor
	Execute each frame's filter chain
	Create a single image from the stack
6. ImageProcessor
	Persist as an image to the file system
	
After the initial pipeline is in place, my next step should probably be to nail down the color definition of the system.	

Need to think through 2D API. Do I want to draw on the screen by projecting everything or do I want to create 3D geometry?
Could also use billboards.
Start with projection just to keep moving forward.

Current Bug/Challenges
Need to have full acceptance tests for rendering output.
	Mountain Lion removed X11 integration. So leveraging OpenImageIO will be a pain for developers. However, for me, might not matter.
	If I leverage that, might set me up for a large headache if Apple breaks it in the future.

If I can find a way to run tests that render out I think it would ultimately save me a bunch of time. 
Manual Testing Feedback Loop
- rake clobber
- rake
- jb create blah
- jb render
- manually close all frames
- look at log/image/screen

Next Milestone: (Composite 2 layers)
Steps:
1. Get SketchAPI rect actually working.
	Expand GLSLSketchAPI.sample() & GLSLShaderManager into a robust design.
	Requires implementing a fill method, so rects can have different colors.
	Need affine transformations to move rectangels around
	Got to establish a coordinate system.
	Integrate Camera
2. Integrate shaders into Renderer
	Need a way to dynamically create shader programs and link them on the fly
	Need to make sure to delete shaders & programs
3. Implement Compositing logic