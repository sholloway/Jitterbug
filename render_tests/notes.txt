Leverage OpenImageIO's idiff tool to compare images.
Can be installed with homebrew.

The idiff program will return a code that can be used by scripts to indicate the results:
0 OK: the images match within the warning and error thresholds.
1 Warning: the errors differ a little, but within error thresholds.
2 Failure: the errors differ a lot, outside error thresholds.
3 The images weren’t the same size and couldn’t be compared.
4 File error: could not find or open input files, etc.

All tests follow the pattern of:
cmd = %x{idiff #{first image} #{second image}}
$?.exitstatus.should == 0

Need to think through about how to save the images I want to compare to and if I should generate error images or a log file.

Look at construct for making tests touching the file system easier.

Important: Turns out idiff needs X11. Need to think about the ramifications of depending on it. 
Look at http://opensourcevfx.org/ for other possibilities. Might be able to depend on OpenImageIO directly with Macruby.
Try doing a brew update. There might be a mountain lion build.


Observation:
Robert Hogan has his sketches where he can pause them and then move the camera within the 3D scene. Something to consider. 
Would change the architecture a bit.

Don't forget about the work I've already done with WebGL. Can use that for a guideline of setting up shaders.

Next steps:
Get pixels flowing.
	API -> SceneGraph -> Spatial Partition -> Culler -> Render -> ImageProcessor -> Image 
	
1. Write basic API code for def rect(x,y,width,height)
	Need stroke, fill, rect_mode, bind to shader (Want to reference a structure of shaders. Don't have multiple copies floating around.)
2. Write SceneGraph
	Need add_geometry 
3. Spatial Partition
	Just need to add all geometry to the culler at this point.
4. Renderer
	Need a way of managing shaders. Part of Geometry class?
	Combine the work done on JBOpenGLView + WebGL
	Render to Framebuffer
5. ImageProcessor
	Get pixels from Framebuffer
	Persist as a PNG image
	
Need to have a GLSLSceneGraph? Or just a GLSLGeometry Node?
	Needs to maintain VBO, possibly vertex indices list and pointer to a shader and textures

Need to think through 2D API. Do I want to draw on the screen by projecting everything or do I want to create 3D geometry?
Could also use billboards.
Start with projection just to keep moving forward.

Look into integrating ARB_debug_output extension, as an alternative to glError.
	